// Code generated by protoc-gen-go-pex. DO NOT EDIT.

package {{ .GoPackageName }}

import (
	"context"

	"github.com/ThreeDotsLabs/watermill/message"
	"github.com/google/uuid"
	"go.essaim.dev/pex/pkg/pex"
	"google.golang.org/protobuf/proto"
)

{{ range $is, $s := .Services }}

const (
	{{ range $im, $m := $s.Methods }}Topic_{{ $s.GoName }}_{{ $m.GoName }} = "{{ $s.GoName }}:{{ $m.GoName }}"
	{{ end }}
)

type {{ $s.GoName }}Publisher interface {
	{{ range $im, $m := $s.Methods }}{{ $m.GoName }}(context.Context, *{{ $m.Input.GoIdent.GoName }}) error
	{{ end }}
}

type _{{ $s.GoName }}Publisher struct {
	p message.Publisher
}

func New{{ $s.GoName }}Publisher(p message.Publisher) {{ $s.GoName }}Publisher {
	return &_{{ $s.GoName }}Publisher{
		p: p,
	}
}

{{ range $im, $m := $s.Methods }}
func (p * _{{ $s.GoName }}Publisher) {{ $m.GoName }}(ctx context.Context, req *{{ $m.Input.GoIdent.GoName }}) error {
	payload, err := proto.Marshal(req)
	if err != nil {
		return err
	}
	m := message.NewMessage(uuid.New().String(), payload)
	m.SetContext(ctx)

	return p.p.Publish(Topic_{{ $s.GoName }}_{{ $m.GoName }}, m)
}
{{ end }}

type {{ $s.GoName }}Subscriber interface {
	{{ range $im, $m := $s.Methods }}{{ $m.GoName }}(context.Context, *{{ $m.Input.GoIdent.GoName }}) error
	{{ end }}
}

func Register{{ $s.GoName }}SubscriberMux(r *pex.Router, s {{ $s.GoName }}Subscriber) {
	{{ range $im, $m := $s.Methods }}r.Handle(Topic_{{ $s.GoName }}_{{ $m.GoName }}, func(m *message.Message) error {
		req := new({{ $m.Input.GoIdent.GoName }})
		if err := proto.Unmarshal(m.Payload, req); err != nil {
			return err
		}
		return s.{{ $m.GoName }}(m.Context(), req)
	})
	{{ end }}}

{{ end }}